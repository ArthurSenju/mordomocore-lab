name: CI - Build, Tests & SonarCloud

on:
  push:
    branches: [ main, develop, staging ]
  pull_request:
    branches: [ main, develop, staging ]
    
permissions:
  contents: read
  checks: write
  pull-requests: write

jobs:
  build_and_analyze:
    name: Build, Tests and SonarCloud Analysis
    runs-on: ubuntu-latest
    env:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      SONAR_ORGANIZATION: ${{ secrets.SONAR_ORGANIZATION }}
      SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Setup .NET 10
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '10.0.x'

      - name: Install dotnet-sonarscanner
        run: |
          dotnet tool install --global dotnet-sonarscanner --version 11.0.0 || true
          echo "${HOME}/.dotnet/tools" >> $GITHUB_PATH

      - name: Ensure Java (install if missing)
        run: |
          if ! java -version 2>/dev/null; then
            sudo apt-get update
            sudo apt-get install -y openjdk-11-jre-headless
          else
            java -version
          fi

      # ==== Sonar begin ====
      - name: SonarScanner Begin
        run: |
          set -eu
          
          SONAR_ARGS="/k:\"${SONAR_PROJECT_KEY}\" /o:\"${SONAR_ORGANIZATION}\" /d:sonar.host.url=\"https://sonarcloud.io\" /d:sonar.login=\"${SONAR_TOKEN}\" /d:sonar.cs.opencover.reportsPaths=\"${GITHUB_WORKSPACE}/TestResults/coverage.opencover.xml\" /d:sonar.scanner.skipJreProvisioning=true"
          
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "Detected pull_request event — adding PR parameters for SonarCloud Decoration"
            PR_KEY="${{ github.event.pull_request.number }}"
            PR_BRANCH="${{ github.head_ref }}"
            PR_BASE="${{ github.event.pull_request.base.ref }}"

            SONAR_ARGS="$SONAR_ARGS /d:sonar.pullrequest.key=\"$PR_KEY\" /d:sonar.pullrequest.branch=\"$PR_BRANCH\" /d:sonar.pullrequest.base=\"$PR_BASE\""
          else
            echo "Not a pull_request event — running normal analysis (no PR decoration params)"
          fi

          echo "Running dotnet sonarscanner begin with args:"
          echo "$SONAR_ARGS"
          dotnet sonarscanner begin $SONAR_ARGS

      - name: Restore
        run: dotnet restore MordomoLab.sln

      - name: Build
        run: dotnet build MordomoLab.sln --no-restore -c Release

      - name: Ensure TestResults folder
        run: mkdir -p TestResults

      - name: Run Unit Tests and Collect Coverage
        run: |
          dotnet test MordomoLab.Tests/MordomoLab.Tests.csproj -c Release \
            --logger "trx;LogFileName=${GITHUB_WORKSPACE}/TestResults/unit-results.trx" \
            /p:CollectCoverage=true \
            /p:CoverletOutputFormat=opencover \
            /p:CoverletOutput=${GITHUB_WORKSPACE}/TestResults/coverage.opencover.xml

      - name: Upload Unit Test TRX
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-trx
          path: TestResults/unit-results.trx
          if-no-files-found: warn

      - name: Run Integration Tests
        id: run-integration-tests
        continue-on-error: true
        run: |
          dotnet test MordomoLab.Tests/MordomoLab.Tests.csproj --no-build -c Release \
            --logger "trx;LogFileName=${GITHUB_WORKSPACE}/TestResults/integration-results.trx"
          echo "dotnet_test_exit_code=$?" >> $GITHUB_OUTPUT

      - name: Upload Integration Test TRX
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-trx
          path: TestResults/integration-results.trx
          if-no-files-found: warn

      - name: SonarScanner End
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          dotnet sonarscanner end /d:sonar.login="${SONAR_TOKEN}" || true

name: CI - Build, Tests & SonarCloud

on:
  push:
    branches: [ main, develop, staging ]
  pull_request:
    branches: [ main, develop, staging ]

permissions:
  contents: read
  checks: write

jobs:
  build_and_analyze:
    name: Build, Tests and SonarCloud Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET 10
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '10.0.x'

      - name: Install dotnet-sonarscanner tool
        run: |
          dotnet tool install --global dotnet-sonarscanner --version 11.0.0 || true
          echo "${HOME}/.dotnet/tools" >> $GITHUB_PATH

      - name: Ensure Java (required by some scanner pieces)
        run: |
          java -version || sudo apt-get update && sudo apt-get install -y openjdk-11-jre-headless

      # --- Sonar Begin
      - name: SonarScanner Begin
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_ORGANIZATION: ${{ secrets.SONAR_ORGANIZATION }}
          SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
        run: |
          dotnet sonarscanner begin \
            /k:"${SONAR_PROJECT_KEY}" \
            /o:"${SONAR_ORGANIZATION}" \
            /d:sonar.host.url="https://sonarcloud.io" \ 
            /d:sonar.login="${SONAR_TOKEN}" \
            /d:sonar.cs.opencover.reportsPaths="${GITHUB_WORKSPACE}/TestResults/coverage.opencover.xml"

      - name: Ensure NuGet cache folder exists
        run: mkdir -p $HOME/.nuget/packages

      - name: Restore
        run: dotnet restore MordomoLab.sln

      - name: Build
        run: dotnet build MordomoLab.sln --no-restore -c Release
        
      - name: Ensure TestResults folder
        run: mkdir -p TestResults

      - name: Run Unit tests and collect coverage (OpenCover) - verbose
        run: |
            set -eux
            echo "PWD: $(pwd)"
            echo "Listing repo root:"
            ls -la
            echo "Listing test project folder:"
            ls -la MordomoLab.Tests || true
            
            dotnet test MordomoLab.Tests/MordomoLab.Tests.csproj -c Release \
              --logger "trx;LogFileName=${GITHUB_WORKSPACE}/TestResults/unit-results.trx" \
              /p:CollectCoverage=true \
              /p:CoverletOutputFormat=opencover \
              /p:CoverletOutput=${GITHUB_WORKSPACE}/TestResults/coverage.opencover.xml

      - name: Show TestResults folder after tests (debug)
        if: always()
        run: |
            echo "==== Files in TestResults ===="
            ls -la TestResults || true
            echo
            echo "==== Find *.trx in workspace ===="
            find . -type f -name "*.trx" -print || true
            echo "==== Find coverage files ===="
            find . -type f -name "coverage*.xml" -print || true

      - name: Upload trx artifact (unit)
        if: always()
        uses: actions/upload-artifact@v4
        with:
            name: unit-test-trx
            path: TestResults/*.trx
            if-no-files-found: warn

      - name: Run Integration tests
        id: run-integration-tests
        continue-on-error: true
        run: |
          mkdir -p TestResults
          dotnet test MordomoLab.Tests/MordomoLab.Tests.csproj --no-build -c Release --logger "trx;LogFileName=$GITHUB_WORKSPACE/TestResults/integration-results.trx"
          echo "dotnet_test_exit_code=$?" >> $GITHUB_OUTPUT

      - name: Upload trx artifact (integration)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-trx
          path: TestResults/integration-results.trx
          if-no-files-found: warn

      # Sonar End
      - name: SonarScanner End
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          dotnet sonarscanner end /d:sonar.login="${SONAR_TOKEN}" || true
